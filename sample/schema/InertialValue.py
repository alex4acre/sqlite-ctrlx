# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InertialValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInertialValue(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InertialValue()
        x.Init(buf, n + offset)
        return x

    # InertialValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InertialValue
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # InertialValue
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # InertialValue
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def InertialValueStart(builder): builder.StartObject(3)
def InertialValueAddX(builder, x): builder.PrependInt16Slot(0, x, 0)
def InertialValueAddY(builder, y): builder.PrependInt16Slot(1, y, 0)
def InertialValueAddZ(builder, z): builder.PrependInt16Slot(2, z, 0)
def InertialValueEnd(builder): return builder.EndObject()
