 with ctrlxdatalayer.system.System("") as datalayer_system:
        datalayer_system.start(False)

        connectionProvider = "DL_IPC_AUTO"# "tcp://boschrexroth:boschrexroth@192.168.1.1:2070"

        if 'SNAP' in os.environ:
            connectionProvider = "ipc://"

        print("Connecting", connectionProvider)
        with datalayer_system.factory().create_provider(connectionProvider) as provider:
            result = provider.start()
            if result is not ctrlxdatalayer.variant.Result.OK:
                print("ERROR Starting Data Layer Provider failed with:", result)
                return

        # Try SSL port 8443
        #provider, connection_string = get_provider(datalayer_system)
        #if provider is None:
        #    print("ERROR Connecting", connection_string, "failed.")
        #    sys.exit(1)

        #print("INFO Connecting", connection_string, "succeeded.")

        #with provider:  # provider.close() is called automatically when leaving with block

        #    print("Starting provider")
        #    result = provider.start()
        #    if result is not ctrlxdatalayer.variant.Result.OK:
        #        print("ERROR Starting Data Layer Provider failed with:", result)
        #        return





     with ctrlxdatalayer.system.System("") as datalayer_system:
        datalayer_system.start(False)

        # Try SSL port 8443
        provider, connection_string = get_provider(datalayer_system)
        if provider is None:
            print("ERROR Connecting", connection_string, "failed.")
            sys.exit(1)

        print("INFO Connecting", connection_string, "succeeded.")

        with provider:  # provider.close() is called automatically when leaving with block

            print("Starting provider")
            result = provider.start()
            if result is not ctrlxdatalayer.variant.Result.OK:
                print("ERROR Starting Data Layer Provider failed with:", result)
                return


           def __on_write(self, userdata: ctrlxdatalayer.clib.userData_c_void_p, address: str, data: Variant, cb: NodeCallback):
        print("__on_write()", "userdata:", data.get_string())
        #_data = data
        #_data.set_string("Waddatest")   
        #data.set_string("test string")
        #result, self.data = data.clone()# _data.clone()
        if self.data.get_type() != data.get_type():
            cb(Result.TYPE_MISMATCH, None)
            return
        data.set_string("test data")
        result, self.data = data.clone()
        cb(Result.OK, self.data)